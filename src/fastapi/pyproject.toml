[project]
name = "fastapi-reference"
version = "0.1.0"
description = "Reference FastAPI backend implementation with best practices"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "FastAPI Reference Team", email = "team@example.com" }
]
license = { text = "MIT" }
keywords = ["fastapi", "api", "backend", "reference"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]
dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "loguru>=0.7.2",
    "python-dotenv>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/raveenb/fastapi-nextjs-docker-github-actions-reference"
Repository = "https://github.com/raveenb/fastapi-nextjs-docker-github-actions-reference"
Issues = "https://github.com/raveenb/fastapi-nextjs-docker-github-actions-reference/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "httpx>=0.25.0",
    "black>=24.1.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "isort>=5.13.0",
    "bandit>=1.7.5",
    "pylint>=3.0.0",
    "pre-commit>=3.5.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = []
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".pytest_cache",
    ".mypy_cache",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | __pycache__
  | \.pytest_cache
  | \.mypy_cache
)/
'''

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
exclude = [
    ".venv",
    "venv",
    "tests",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
asyncio_mode = "auto"
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@abstractmethod",
]

[tool.hatch.envs.default.scripts]
dev = "uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
test = "pytest"
lint = "ruff check ."
format = "black ."
type-check = "mypy ."
coverage = "pytest --cov=app --cov-report=html --cov-report=term"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
