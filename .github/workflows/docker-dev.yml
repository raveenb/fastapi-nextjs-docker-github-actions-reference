name: Docker Development Build

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Build target'
        required: true
        default: 'both'
        type: choice
        options:
          - backend
          - frontend
          - both
      push_to_registry:
        description: 'Push to registry'
        required: false
        default: false
        type: boolean
      tag_suffix:
        description: 'Tag suffix (e.g., experimental, testing)'
        required: false
        default: 'dev'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  build-dev:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to GitHub Container Registry
        if: inputs.push_to_registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate tags
        id: tags
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH=${GITHUB_REF#refs/heads/}
          BRANCH=${BRANCH//\//-}
          
          BACKEND_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${BRANCH}-${{ inputs.tag_suffix }}-${TIMESTAMP}"
          FRONTEND_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${BRANCH}-${{ inputs.tag_suffix }}-${TIMESTAMP}"
          
          echo "backend_tag=${BACKEND_TAG}" >> $GITHUB_OUTPUT
          echo "frontend_tag=${FRONTEND_TAG}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Build Backend (Development)
        if: inputs.target == 'backend' || inputs.target == 'both'
        uses: docker/build-push-action@v5
        with:
          context: ./src/fastapi
          file: ./src/fastapi/Dockerfile.dev
          platforms: linux/amd64
          push: ${{ inputs.push_to_registry }}
          tags: ${{ steps.tags.outputs.backend_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: development
          build-args: |
            BUILD_MODE=development
            ENABLE_HOT_RELOAD=true

      - name: Build Frontend (Development)
        if: inputs.target == 'frontend' || inputs.target == 'both'
        uses: docker/build-push-action@v5
        with:
          context: ./src/nextjs
          file: ./src/nextjs/Dockerfile.dev
          platforms: linux/amd64
          push: ${{ inputs.push_to_registry }}
          tags: ${{ steps.tags.outputs.frontend_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: development
          build-args: |
            BUILD_MODE=development
            ENABLE_HOT_RELOAD=true

      - name: Test Development Images Locally
        if: inputs.push_to_registry == false
        run: |
          echo "Testing development images locally..."
          
          # Create test network
          docker network create test-net || true
          
          # Run backend
          if [[ "${{ inputs.target }}" == "backend" ]] || [[ "${{ inputs.target }}" == "both" ]]; then
            docker run -d --name test-backend --network test-net \
              -p 8000:8000 \
              -e ENVIRONMENT=development \
              ${{ steps.tags.outputs.backend_tag }}
            
            # Wait and test
            sleep 5
            curl -f http://localhost:8000/health || exit 1
            docker stop test-backend && docker rm test-backend
          fi
          
          # Run frontend
          if [[ "${{ inputs.target }}" == "frontend" ]] || [[ "${{ inputs.target }}" == "both" ]]; then
            docker run -d --name test-frontend --network test-net \
              -p 3000:3000 \
              -e NEXT_PUBLIC_API_URL=http://test-backend:8000 \
              ${{ steps.tags.outputs.frontend_tag }}
            
            # Wait and test
            sleep 10
            curl -f http://localhost:3000 || exit 1
            docker stop test-frontend && docker rm test-frontend
          fi
          
          # Cleanup
          docker network rm test-net || true

      - name: Output Summary
        run: |
          echo "## Development Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: ${{ steps.tags.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: ${{ inputs.target }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Suffix**: ${{ inputs.tag_suffix }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pushed to Registry**: ${{ inputs.push_to_registry }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.target }}" == "backend" ]] || [[ "${{ inputs.target }}" == "both" ]]; then
            echo "### Backend Image" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.tags.outputs.backend_tag }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ inputs.target }}" == "frontend" ]] || [[ "${{ inputs.target }}" == "both" ]]; then
            echo "### Frontend Image" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.tags.outputs.frontend_tag }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi