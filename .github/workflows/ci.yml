name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  POSTGRES_VERSION: "16"

jobs:
  # Backend Python tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    defaults:
      run:
        working-directory: ./src/fastapi
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "src/fastapi/pyproject.toml"
      
      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
      
      - name: Run linting
        run: |
          uv run ruff check app tests
      
      - name: Run type checking
        run: |
          uv run mypy app
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: |
          uv run pytest \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            -v
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./src/fastapi/coverage.xml
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            src/fastapi/htmlcov/
            src/fastapi/coverage.xml
            src/fastapi/.coverage

  # Frontend Node.js tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./src/nextjs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: src/nextjs/pnpm-lock.yaml
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run linting
        run: pnpm lint
      
      - name: Run type checking
        run: pnpm type-check
      
      - name: Run tests with coverage
        run: pnpm test:ci
      
      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./src/nextjs/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            src/nextjs/coverage/
            src/nextjs/.next/

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/fastapi
          file: ./src/fastapi/Dockerfile
          push: false
          tags: backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/nextjs
          file: ./src/nextjs/Dockerfile
          push: false
          tags: frontend:test
          build-args: |
            NEXT_PUBLIC_API_URL=http://localhost:8000
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration tests with docker-compose
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create .env file
        run: |
          cp .env.example .env
          echo "POSTGRES_PASSWORD=testpass" >> .env
      
      - name: Start services with docker-compose
        run: |
          docker compose up -d
          sleep 10
      
      - name: Wait for services to be healthy
        run: |
          timeout 60 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 2; done'
      
      - name: Run deployment tests
        run: ./test-deployment.sh
      
      - name: Run database tests
        run: ./test-database.sh
      
      - name: Show logs on failure
        if: failure()
        run: |
          docker compose logs
      
      - name: Stop services
        if: always()
        run: docker compose down -v

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # All tests passed
  all-tests-pass:
    name: All Tests Pass
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build, integration-test, code-quality]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.backend-test.result }}" != "success" || \
                "${{ needs.frontend-test.result }}" != "success" || \
                "${{ needs.docker-build.result }}" != "success" || \
                "${{ needs.integration-test.result }}" != "success" || \
                "${{ needs.code-quality.result }}" != "success" ]]; then
            echo "One or more tests failed"
            exit 1
          fi
          echo "All tests passed successfully!"