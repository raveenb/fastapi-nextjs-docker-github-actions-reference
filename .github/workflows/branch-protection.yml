name: Branch Protection Setup

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to protect'
        required: false
        default: 'main'
      enforce_admins:
        description: 'Enforce rules for administrators'
        required: false
        type: boolean
        default: false

permissions:
  administration: write
  contents: read

jobs:
  setup-protection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup branch protection
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = '${{ github.event.inputs.branch }}' || 'main';
            const enforceAdmins = ${{ github.event.inputs.enforce_admins }} || false;
            
            try {
              // Configure branch protection
              await github.rest.repos.updateBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branch,
                required_status_checks: {
                  strict: true, // Require branches to be up to date
                  contexts: [
                    'test-backend',
                    'test-frontend',
                    'lint',
                    'type-check',
                    'build-backend',
                    'build-frontend'
                  ]
                },
                enforce_admins: enforceAdmins,
                required_pull_request_reviews: {
                  required_approving_review_count: 1,
                  dismiss_stale_reviews: true,
                  require_code_owner_reviews: false,
                  require_last_push_approval: false,
                  bypass_pull_request_allowances: {
                    users: [],
                    teams: [],
                    apps: []
                  }
                },
                restrictions: null, // No user/team restrictions
                allow_force_pushes: false,
                allow_deletions: false,
                block_creations: false,
                required_conversation_resolution: true,
                lock_branch: false,
                allow_fork_syncing: true
              });
              
              console.log(`âœ… Branch protection enabled for ${branch}`);
              
              // Get current protection status
              const protection = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branch
              });
              
              // Output summary
              const summary = `
              ## ðŸ”’ Branch Protection Configured
              
              ### Protected Branch: ${branch}
              
              #### âœ… Protection Rules:
              - **Require pull request reviews**: ${protection.data.required_pull_request_reviews ? 'Yes' : 'No'}
              - **Required approving reviews**: ${protection.data.required_pull_request_reviews?.required_approving_review_count || 0}
              - **Dismiss stale reviews**: ${protection.data.required_pull_request_reviews?.dismiss_stale_reviews || false}
              - **Require status checks**: ${protection.data.required_status_checks ? 'Yes' : 'No'}
              - **Require branches to be up to date**: ${protection.data.required_status_checks?.strict || false}
              - **Enforce for admins**: ${protection.data.enforce_admins?.enabled || false}
              - **Allow force pushes**: ${protection.data.allow_force_pushes?.enabled || false}
              - **Allow deletions**: ${protection.data.allow_deletions?.enabled || false}
              - **Require conversation resolution**: ${protection.data.required_conversation_resolution?.enabled || false}
              
              #### ðŸŽ¯ Required Status Checks:
              ${protection.data.required_status_checks?.contexts?.map(c => `- ${c}`).join('\n') || '- None configured'}
              `;
              
              // Write to summary
              await core.summary
                .addRaw(summary)
                .write();
                
            } catch (error) {
              console.error('Error setting up branch protection:', error);
              
              // If error is about admin enforcement, retry without it
              if (error.message.includes('enforce_admins')) {
                console.log('Retrying without admin enforcement...');
                await github.rest.repos.updateBranchProtection({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  branch: branch,
                  required_status_checks: {
                    strict: true,
                    contexts: [
                      'test-backend',
                      'test-frontend',
                      'lint',
                      'type-check'
                    ]
                  },
                  enforce_admins: false,
                  required_pull_request_reviews: null,
                  restrictions: null,
                  allow_force_pushes: false,
                  allow_deletions: false,
                  block_creations: false,
                  required_conversation_resolution: false,
                  lock_branch: false,
                  allow_fork_syncing: true
                });
                console.log('âœ… Basic protection enabled (without PR reviews)');
              } else {
                throw error;
              }
            }